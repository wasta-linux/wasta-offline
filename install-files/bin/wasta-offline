#!/bin/bash

# ==============================================================================
# wasta-offline
#
# wasta-offline modifies the current computer's "software sources" (or apt
#   software repositories) to only use local repositories from a wasta-offline
#   folder.
#
#   This wasta-offline folder can include both "local cache" and "apt-mirror"
#   or "debmirror" repositories.
#
#   The "wasta-offline local cache" repository consists of software packages
#   from another computer's local apt cache of installed software, which is
#   loaded into the wasta-offline folder using "wasta-offline-setup".
#
#   "wasta-offline mirror" repositories are "full mirrors of all software
#   available in corresponding internet repositories."  They are loaded into
#   the wasta-offline folder using "apt-mirror" or "debmirror".  The defined
#   "base path" forapt-mirror needs to be set to "wasta-offline/apt-mirror", so
#   that wasta-offline will know where to find these "wasta-offline apt-mirror
#   repositories."  For example, then, a "wasta-offline apt-mirror repository"
#   of the main wasta-Linux PPA would be in this folder:
#
#     wasta-offline/apt-mirror/mirror/ppa.launchpad.net/wasta-linux/dists/wasta
#
#   Once the apt sources are modified to only use these wasta-offline
#   repositories, a zenity GUI window is kept open while a user performs any
#   desired local software updates and installs with other utilities such as
#   MintUpdate, Synaptic Package Manager, etc.
#
#   After all wasta-offline local software updates and installs are complete,
#   and the GUI window is closed , the current computer's "software sources"
#   (or apt software repositories) are restored to their original settings.
#
#   2014-03-18 rik: Initial script
#   2014-03-25 rik: Included backup (and restore) of /var/lib/apt/lists
#   2014-03-31 rik: "prune" the "pool folders" during apt-mirror repository
#       search. This gives a 100-fold performance improvement,
#       as the pool folders can be very big, but only contain the binaries
#       and no Package listings.
#   2014-04-05 rik: Add ability to select "precise-updates"
#       and "precise-security" to apt-mirror find command.
#   2014-04-08 rik: Added "HYBRID" software mode, so normal internet
#       repositories can supplement wasta-offline folder.  If can't ping google,
#       then will only have the one "OFFLINE" software mode as an option.
#       Reworked Progress dialogs
#   2014-04-14 rik: Added jcl modifications to regen Packages list if found
#       to be outdated (.deb exists in the folder newer than the Packages file).
#       This is optional so do not have to have dpkg-scanpackages installed,
#       which would make it difficult to install wasta-offline manually on
#       remote machines.
#  2014-04-19 jcl: force su-mode for non-sudo users, cleanup obsolete code,
#       add "sleep" time in progress loops to ensure background processes have
#       started, and "sync" to flush any buffered writes, Added --multiversion
#       flag to dpkg-scanpackages, and checked for 0-sized Packages.
#  2014-04-21 jcl: necessary to have separate i386 and amd64 folders.
#       Apparently APT isn't smart enough to NOT show amd64 software to a i386
#       system.  Amd64 sometimes needs i386 packages so can't use --arch amd86
#       for dpkg-scanpackages and for safety sake we don't want to make ALL i386
#       packages available to amd64.  So keep separate folders for 32 and 64bit.
#  2014-04-24 rik: $USER, $(logname), $(whoami), $(who) all not set when using
#       gksu, so can't "find" the /media/$USER/wasta-offline folder.  Changing
#       to just returning first /media/*/*/wasta-offline for now.
#  2014-07-16 jcl: fixing some "restore original state" issues in case another
#       app (like mintupdate) is re-creating the folder structures.
#       -removed GKSU call from .desktop Exec= (didn't work for non-sudo users)
#       -wait if /var/lib/apt/lists/ is locked
#  2014-12-17 jcl: 1.0.1 reconfiguring backup and restore code.
#       Using Sam Smucker's code to support debmirror / repositories
#       (create missing Packages, exclude .temp)
#  2015-06-30 jcl: 1.0.2 support "Rafaela", offline non-distributables
#  2016-04-26 jcl: add non-distributables <WO_FOLDER> variable
#  2017-12-01 jcl: 2.0.0 re-write for polkit UI/priviledge separation
# ==============================================================================

# pipefail will make $? contain the rightmost non-zero return, or 0 if all
#   commands return 0.  Needed for "| tee" commands or else 0 will be the return
#   of the commands even if the "real command" returned an error (since tee will
#   return 0).
set -o pipefail

APT_LISTS="/var/lib/apt/lists"

LOG_DATE=$(date +%F-%H-%M)
HOST=$(uname -n)
BASE=$(realpath $(dirname $0))

# Variables and script needed for localization.
export TEXTDOMAINDIR=/usr/share/locale
#export TEXTDOMAINDIR=~/.local/share/locale # for user test installation
export TEXTDOMAIN=wasta-offline
. gettext.sh

# ------------------------------------------------------------------------------
# Function: wait_for_locked_apt
#
#   Check if other tasks are using apt, and wait until they are finished.
# ------------------------------------------------------------------------------
wait_for_locked_apt () {
  if [ -e "${APT_LISTS}/lock" ]; then
    pkexec wasta-offline-root wait_for_locked_apt "$WO_LOC" "$LOG_DATE" &
    WATCHED_PID=$!

    sleep 1
    COUNT=1
    while [ "$(ps --no-headers -p $WATCHED_PID)" ]; do
      echo "$(eval_gettext "#Another program is accessing the software lists...\n\nIs mintupdate or synaptic or apt cron job running?\n\nWaiting for it to finish...Elapsed Time: \$COUNT seconds\n\n")"
      sleep 1
      COUNT=$((COUNT+1))
    done | zenity --progress \
            --title="$(gettext "wasta [Offline]: wait for apt list lock to finish")" \
            --pulsate --auto-close --width=500 --height=100 \
            --no-cancel \
            --window-icon=info 2>/dev/null
  fi
}

# ------------------------------------------------------------------------------
# Function: scriptExit
#
#   Ensure we restore sources.list and sources.list.d when we exit
# ------------------------------------------------------------------------------
scriptExit () {
  if [ -z "$WO_LOC" ]; then
    LOG=$(mktemp --tmpdir wasta-offline.XXX)
    WO_LOC=$LOG
    echo "$MSG" | tee -a "$LOG"
    echo "early exit: logging to $LOG" | tee -a "$LOG"
  fi

  # restore apt lists if saved item found
  if [ -e "${APT_LISTS}.wasta/" ]; then
    wait_for_locked_apt
  fi
  pkexec wasta-offline-root restoreApt "$WO_LOC" "$LOG_DATE"
  if [ $? -gt 0 ]; then
    PKEXEC_ERR=1
  fi

  if [ "$PPA_SERIES" == "precise" ] \
  || [ "$PPA_SERIES" == "trusty" ] \
  || [ "$PPA_SERIES" == "xenial" ] \
  || [ "$PPA_SERIES" == "bionic" ] \
  || [ "$PPA_SERIES" == "focal" ] \
  || [ "$PPA_SERIES" == "jammy" ]; then
    echo "
Hint: although theoretically unsafe, avoid the admin prompts with

/etc/polkit-1/localauthority/50-local.d/org.wasta.apps.wasta-offline.pkla
------------------------------------------------------------
[Override policy: allow non-admins to run wasta-offline]
    Identity=unix-group:*
    Action=org.wasta.apps.wasta-offline
    ResultActive=yes
    ResultAny=yes
" | tee -a "$LOG"
  else # modern polkit > .105 only supports javascript .rules
    #requires a systemctl restart polkit; logs to /var/log/auth.log
    echo "
Hint: although theoretically unsafe, avoid the admin prompts with

chown :polkitd /etc/polkit-1/rules.d/org.wasta.apps.wasta-offline.rules
------------------------------------------------------------
polkit.addRule(function(action, subject) {
    if ((action.id == "org.wasta.apps.wasta-offline"))
    {
        return polkit.Result.YES;
    }
});
" | tee -a "$LOG"
  fi

  echo "-----------------------------------------------------------" | tee -a "$LOG"
  echo $(date +%T) $HOST "wasta-offline complete"                    | tee -a "$LOG"
  echo "===========================================================" | tee -a "$LOG"

if [ $PKEXEC_ERR -gt 0 ]; then
  zenity --text-info --title="$(gettext "wasta [Offline] Error: Log")" --width=650 \
    --height=500 --no-wrap --filename="$LOG" --font="Ubuntu Mono" \
    --window-icon=/usr/share/icons/hicolor/scalable/apps/wasta-offline.svg \
    2>/dev/null
 fi

  exit 0
}

# ------------------------------------------------------------------------------
# Function: update_snaps
#
#   Update snap packages if snapd exists on the system.
# ------------------------------------------------------------------------------
update_snaps() {
    # If /usr/bin/snap exists, then snapd is installed.

    # Set update mode.
    if [[ $MODE == 'OFFLINE' ]]; then
        NETMODE=''
    else
        NETMODE="-i"
    fi

    # wasta-offline-snap-manager will use its own log file, but there should at
    #   least be some mention of it in the wasta-offline log.
    echo | tee -a "$LOG"
    echo "-------------------------------------------------------" | tee -a "$LOG"
    echo "*** Starting wasta-snap-manager to update snaps."        | tee -a "$LOG"
    echo "-------------------------------------------------------" | tee -a "$LOG"
    echo                                                           | tee -a "$LOG"
    echo $(date +%T) $HOST "wasta-snap-manager started."           | tee -a "$LOG"
    echo -e "Its log file can be found at:\n$WO_LOC/log/wasta-snap-manager" | tee -a "$LOG"
    echo                                                           | tee -a "$LOG"
    "$BASE"/wasta-snap-manager $NETMODE -s "$WO_LOC"
    echo "-------------------------------------------------------" | tee -a "$LOG"
    echo "*** Snaps updated. Continuing with wasta-offline."       | tee -a "$LOG"
    echo "-------------------------------------------------------" | tee -a "$LOG"
}

# ------------------------------------------------------------------------------
# Initial Setup
# ------------------------------------------------------------------------------

#prompt for credentials early on, since it always runs as root at some point
pkexec wasta-offline-root init
PKEXEC_ERR=$?
if [ $PKEXEC_ERR -gt 0 ]; then
  #only fails on authentication error, so don't attempt to restore old backup.
  exit 1
fi

# Need to store up log messages, since log location not set yet.
MSG=\
"===========================================================
"
MSG+=$(date +%T)
MSG+=" $HOST wasta-offline started"
MSG+="
-----------------------------------------------------------"

# ------------------------------------------------------------------------------
# Set wasta-offline archive location
# ------------------------------------------------------------------------------

WO_LOC=""

# If passed parameter, attempt to use it
if [ -n "$1" ]
then
    PARAM="$1"
    MSG+="

Passed Parameter: $PARAM"

    # trim off trailing whitespace:
    PARAM=$(echo "${PARAM}" | sed 's@ *$@@')
    # trim off trailing "/"
    PARAM=$(echo "${PARAM}" | sed 's@/*$@@')

    if [[ "$PARAM" == *"wasta-offline" ]] && [[ -e "$PARAM" ]]
    then
        # valid location, use it (if not valid will be prompted below)
        WO_LOC="$PARAM"
        MSG+="

wasta-offline location set from passed parameter: $WO_LOC"
    else
        MSG+="

Parameter invalid, wasta-offline location not set: $PARAM"
    fi
fi

# if WO_LOC not set, give initial prompt and then prompt for folder
if [[ -z "$WO_LOC" ]]
then
    zenity --question --no-wrap --height=200 --width=500 \
        --title="$(gettext "wasta [Offline]")" \
        --window-icon=/usr/share/icons/hicolor/scalable/apps/wasta-offline.svg \
        --text="<b>$(gettext "Use wasta [Offline] for local software
updates or installs on this computer?")</b>

<i>$(gettext "You will be prompted to locate an existing
'wasta-offline' folder.")</i>\n

<small><i><b>$(gettext "NOTE:")</b> $(gettext "If you want to add a computer's local software
cache to a 'wasta-offline' folder, instead use
'wasta-offline-setup'.")</i></small>" 2>/dev/null
    if [ "$?" -ne 0 ]
    then
        # User didn't say yes: exit
        scriptExit
    fi

    # get series:
    START_FOLDER=""

    # first, look for wasta-offline folder under /media/$USER (12.10 and newer)
    # 2014-04-24 rik: $USER, $(logname), $(whoami), $(who) all not working when
    #   launch with gksu.  So, just setting to /media/*/*/wasta-offline :-(
    START_FOLDER=$(ls -1d /media/*/*/wasta-offline 2> /dev/null | head -1)

    if [ -z "$START_FOLDER" ]
    then
        # second, look for wasta-offline folder under /media (12.04 and older)
        START_FOLDER=$(ls -1d /media/*/wasta-offline 2>/dev/null | head -1)
    fi

    if [ -z "$START_FOLDER" ]
    then
        # no wasta-offline, try /media/$USER (12.10 and newer)
        START_FOLDER=$(ls -1d /media/$USER 2>/dev/null | head -1)
    fi

    if [ -z "$START_FOLDER" ]
    then
        # no /media/$USER, try /media
        START_FOLDER=$(ls -1d /media 2>/dev/null | head -1)
    fi

   if [ -z "$START_FOLDER" ]
    then
        # no /media folder, so start in /
        START_FOLDER="/"
    fi

    MSG+="

start folder: $START_FOLDER"

    FOLDER_SEL=$(zenity --file-selection \
        --directory --filename="$START_FOLDER" \
        --window-icon=/usr/share/icons/hicolor/scalable/apps/wasta-offline.svg \
        --title="$(gettext "Select a 'wasta-offline' Folder")" 2>/dev/null)
    if [[ "$FOLDER_SEL" == *"wasta-offline" ]]
    then
        # valid wasta-offline folder
        WO_LOC="$FOLDER_SEL"

        MSG+="

wasta-offline location: $WO_LOC"
    else
        if [[ -z $FOLDER_SEL ]]; then
            FOLDER_SEL="$(gettext "(none)")"
        fi
        zenity --error --no-wrap --height=200 \
          --title="$(gettext "wasta [Offline]: Exiting")" \
          --window-icon=/usr/share/icons/hicolor/scalable/apps/wasta-offline.svg \
          --text="<b>$(gettext "Selected Folder:")</b> $FOLDER_SEL\n
$(gettext "This folder is not a <b>'wasta-offline'</b> folder.\n
wasta [Offline] will now exit.")\n\n" 2>/dev/null
        scriptExit
    fi
fi

#If still don't have wasta-offline folder, exit
if [[ -z "$WO_LOC" ]]
then
#    zenity --error --no-wrap --height=200 \
#        --title="$(gettext "wasta [Offline]: Exiting")" \
#        --window-icon=/usr/share/icons/hicolor/scalable/apps/wasta-offline.svg \
#        --text "$(gettext "No <b>'wasta-offline'<b> folder has been set.\n
#wasta [Offline] will now exit.")\n\n" 2>/dev/null
    echo "No 'wasta-offline' folder has been set. Exiting.
Justin, if you're reading this, then you win the prize!"
    scriptExit
fi

# FINALLY have directory, so set log location
mkdir -p "$WO_LOC/log/wasta-offline"
LOG="$WO_LOC/log/wasta-offline/$LOG_DATE-$HOST.log"

echo "$MSG" | tee -a "$LOG"

# ------------------------------------------------------------------------------
# Main Processing
# ------------------------------------------------------------------------------

pkexec wasta-offline-root backupApt "$WO_LOC" "$LOG_DATE"
PKEXEC_ERR=$?
if [ $PKEXEC_ERR -gt 0 ]; then
  scriptExit
fi


NET_CHECK=$(ping -c1 "www.google.com" 2> /dev/null)
if [[ $? == 0 ]]; then
    #network found, give 2 list choices
    LIST=("TRUE"  "OFFLINE"  "
$(gettext "ONLY 'wasta-offline' folder
*** NO INTERNET CONNECTION WILL BE USED ***")\
"  "FALSE"  "HYBRID"  "
$(gettext "BOTH 'wasta-offline' folder and internet
*** INTERNET DOWNLOADS MAY BE SLOW or EXPENSIVE ***")")
else
    #network not found, only 1 choice
    LIST=("TRUE"  "OFFLINE"  "
$(gettext "ONLY 'wasta-offline' folder")
")
fi

MODE=""
MODE=$(zenity --list --title="$(gettext "wasta [Offline]")" --width=500 --height=500 \
    --window-icon=/usr/share/icons/hicolor/scalable/apps/wasta-offline.svg \
    --text="<big>$(gettext "Install or update local software from a <i>'wasta-offline'</i> folder.")</big>

    <small><i><b>$(gettext "NOTE:")</b> $(gettext "Be sure to close any other open software
    management programs such as 'Update Manager' or
    'Synaptic Package Manager' before continuing.")</i></small>

<b>$(gettext "wasta-offline folder:")</b> $WO_LOC

<b>$(gettext "SELECT the wasta [Offline] software source:")</b>" --radiolist \
    --column "        " --column "$(gettext "Value")" --column "$(gettext "Software Source")" \
    --hide-column=2 --hide-header "${LIST[@]}" 2>/dev/null
    )

case "$MODE" in

"OFFLINE")
    echo | tee -a "$LOG"
    echo "$(gettext "OFFLINE Mode selected")" | tee -a "$LOG"
    # REPLACE sources.list, disable sources.list.d folder
    wait_for_locked_apt
    pkexec wasta-offline-root offlineApt "$WO_LOC" "$LOG_DATE"
    PKEXEC_ERR=$?
    if [ $PKEXEC_ERR -gt 0 ]; then
      scriptExit
    fi
;;

"HYBRID")
    echo | tee -a "$LOG"
    echo "$(gettext "OFFLINE AND INTERNET Mode selected")" | tee -a "$LOG"
;;

*)
    # Mode not recognized (user probably canceled dialog)
    scriptExit
;;

esac

# Update snaps via wasta-snap-manager if snapd is installed.
if [[ -x /usr/bin/snap ]]; then
    update_snaps
fi

# get series, load them up.
REPO_SERIES=$(lsb_release -sc)
case "$REPO_SERIES" in
    maya)
        #LTS 12.04-based Mint 13
        PPA_SERIES="precise"
    ;;

    nadia)
        PPA_SERIES="quantal"
    ;;

    olivia)
        PPA_SERIES="raring"
    ;;

    petra)
        PPA_SERIES="saucy"
    ;;

    qiana|rebecca|rafaela|rosa)
        #LTS 14.04 based Mint 17.x
        PPA_SERIES="trusty"
    ;;
    sarah|serena|sonya|sylvia)
        #LTS 16.04 based Mint 18.x
        PPA_SERIES="xenial"
    ;;
    tara|tessa|tina|tricia)
        #LTS 18.04 based Mint 19.x
        PPA_SERIES="bionic"
    ;;
    ulyana|ulyssa|uma|una)
        #LTS 20.04-based Mint 20.x
        PPA_SERIES="focal"
    ;;
    vanessa|vera|victoria|virginia)
        #LTS 22.04-based Mint 21.x
        PPA_SERIES="jammy"
    ;;
    wilma|xia)
        #LTS 24.04-based Mint 22.x
        PPA_SERIES="noble"
    ;;
    *)
        # Not a Mint distribution, just go with what is reported
        PPA_SERIES=$REPO_SERIES
    ;;
esac

echo | tee -a "$LOG"
echo "Series Folder set to: $REPO_SERIES" | tee -a "$LOG"
echo "PPA Series Folder set to: $PPA_SERIES" | tee -a "$LOG"

# get architecture:
ARCH=$(uname -m)

if [ $ARCH == 'x86_64' ]
then
    ARCH_FOLDER="binary-amd64"
elif [ $ARCH == 'i386' ] || [ $ARCH == 'i686' ]
then
    ARCH_FOLDER="binary-i386"
else
    ARCH_FOLDER="binary-${ARCH}"
fi

echo "Architecture Folder set to: $ARCH_FOLDER" | tee -a "$LOG"

# local-cache repository addition, if found.
if [ -x "$WO_LOC/local-cache/$REPO_SERIES/$ARCH_FOLDER/" ];
then
    # --------------------------------------------------------------------------
    # Optional: Update Package cache if necessary
    # --------------------------------------------------------------------------

    # this section depends on dpkg-scanpackages being available.
    # dpkg-scanpackages is not installed by default, but we don't want to add
    # a dependency on this, so make it an optional step.

    if [ -x /usr/bin/dpkg-scanpackages ]
    then
        cd "$WO_LOC/local-cache"
        OUTDATED_PACKAGES="assume yes"

        if [ -s "$REPO_SERIES/$ARCH_FOLDER/Packages" ]
        then
            #verified "Packages" exists, now we can compare the timestamp
            #  to the .debs and see
            OUTDATED_PACKAGES=$(\
                find "$REPO_SERIES/$ARCH_FOLDER" -iname "*.deb" \
                     -newer "$REPO_SERIES/$ARCH_FOLDER/Packages"\
            )
        fi
        if [ -n "$OUTDATED_PACKAGES" ]
        then
            echo | tee -a "$LOG"
echo "--------------------------------------------------------" | tee -a "$LOG"
echo "*** Generate pkg list for wasta-offline Local Cache Repo" | tee -a "$LOG"
echo "--------------------------------------------------------" | tee -a "$LOG"
            echo | tee -a "$LOG"

            #flush unfinished (buffered) writes to the USB before continuing.
            sync ; sync
            dpkg-scanpackages --multiversion "$REPO_SERIES/$ARCH_FOLDER" \
                1> "$REPO_SERIES/$ARCH_FOLDER/Packages.0"  2>> "$LOG" &
             WATCHED_PID=$!

            (
            sleep 2
            COUNT=2
            while [ "$(ps --no-headers -p $WATCHED_PID)" ]
            do
                echo "$(eval_gettext "#Generating software list for wasta [Offline]...\n\nElapsed Time: \$COUNT seconds\n\n\n")"
                sleep 1
                COUNT=$((COUNT+1))
            done

            echo | tee -a "$LOG"
            echo "$(eval_gettext "Info: dpkg-scanpackages took approximately \$COUNT sec.")" |tee -a "$LOG"

            #flush unfinished (buffered) writes to the USB before continuing.
            sync ; sync

            ) | zenity --progress \
                --title="$(gettext "wasta [Offline]: Generating Software Package List")" \
                --pulsate --auto-close --width=500 --height=200 \
                --window-icon=/usr/share/icons/hicolor/scalable/apps/wasta-offline.svg \
                --text="$(gettext "Generating software list for wasta [Offline]...\n\n\n\n")" \
                2>/dev/null

            echo | tee -a "$LOG"
            echo "---------------------------------------------------" | tee -a "$LOG"
            echo | tee -a "$LOG"

            if [ -s "$REPO_SERIES/$ARCH_FOLDER/Packages.0" ]
            then
                # filesize is NOT 0
                mv "$REPO_SERIES/$ARCH_FOLDER/Packages.0" \
                   "$REPO_SERIES/$ARCH_FOLDER/Packages" 2>> "$LOG"
                echo "Compressing Packages file" | tee -a "$LOG"
                gzip -9c "$REPO_SERIES/$ARCH_FOLDER/Packages" \
                    1> "$REPO_SERIES/$ARCH_FOLDER/Packages.gz" 2>> "$LOG"
            else
                # filesize is 0
                echo "ERROR:  Probably a corrupt .deb file." | tee -a "$LOG"
                echo "check dpkg-scanpackages log output." | tee -a "$LOG"
                echo "Deleting packages.0:" | tee -a "$LOG"
                rm "$REPO_SERIES/$ARCH_FOLDER/Packages.0" 2>> "$LOG"
                PKEXEC_ERR=1
                scriptExit
            fi
        fi
    fi
    # --------------------------------------------------------------------------
    # END Optional: Update Package cache if necessary
    # --------------------------------------------------------------------------

    if [ -e "$WO_LOC/local-cache/$REPO_SERIES/$ARCH_FOLDER/Packages" ] || \
       [ -e "$WO_LOC/local-cache/$REPO_SERIES/$ARCH_FOLDER/Packages.gz" ]
    then
        # need to wrap file in quotes, in case drive has space in name
        # adding [trusted=yes] so won't get authentication warnings
        APT_LINE="deb [trusted=yes] file:\"$WO_LOC/local-cache\" $REPO_SERIES/$ARCH_FOLDER/"

        echo | tee -a "$LOG"
        echo "$(date +%T) local-cache repository found: adding following line to sources.list:" | tee -a "$LOG"
        echo "$APT_LINE" | tee -a "$LOG"

        # Insert at top of sources.list
        pkexec wasta-offline-root addOfflineApt "$WO_LOC" "$LOG_DATE" "$REPO_SERIES" "$ARCH_FOLDER"
        PKEXEC_ERR=$?
        if [ $PKEXEC_ERR -gt 0 ]; then
          scriptExit
        fi
    else
        echo | tee -a "$LOG"
        echo "No $WO_LOC/local-cache/$REPO_SERIES/$ARCH_FOLDER/Packages file found.
*wasta [Offline] WILL RUN WITHOUT THE OFFLINE LOCAL-CACHE*\n\n" | tee -a "$LOG"
        zenity --error --no-wrap --height=200 \
          --title="$(gettext "wasta [Offline] PACKAGES error")" \
          --window-icon=/usr/share/icons/hicolor/scalable/apps/wasta-offline.svg \
          --text="<b>$(gettext "Local-cache is DISABLED due to an error")</b>\n
$(eval_gettext "Check the logs (\$LOG)
for Package errors.")

$(gettext "Internet and mirror repositories will still work, so not aborting.")" 2>/dev/null
    fi
else
    echo | tee -a "$LOG"
    echo "No wasta-offline local-cache repository found to add to sources.list." | tee -a "$LOG"
fi

MIRROR_BASE=""
# mirror additions, if found
if [ -x "$WO_LOC/mirror" ]
then
  MIRROR_BASE="mirror"
elif [ -x "$WO_LOC/apt-mirror" ]
then
  MIRROR_BASE="apt-mirror"
elif [ -x "$WO_LOC/debmirror" ]
then
  MIRROR_BASE="debmirror"
fi

if [ "${MIRROR_BASE}" ]; then
    echo | tee -a "$LOG"
    echo "$(date +%T) ${MIRROR_BASE} folder found: searching for repositories to add to sources.list..." | tee -a "$LOG"

    # find mirror repositories
    TMPDIR=$(mktemp -d)

    GZIP_OPTION="dk --verbose"
    [ "$PPA_SERIES" == "precise" ] || \
    [ "$PPA_SERIES" == "quantal" ] || \
    [ "$PPA_SERIES" == "raring" ]  || \
    [ "$PPA_SERIES" == "saucy" ]      \
        && GZIP_OPTION="d --verbose"

    # zenity progress dialog
    (
    # convert Packages.gz to Packages first (for debmirror)  -k=keep orig

    echo "$(gettext "#Creating Packages files from Packages.gz ...\n\n\n\n\n")"

    # find, but first "prune" "pool folders" (containing the actual binaries)
    #   for performance (gains approx 100 fold improvement)
    # second "$REPO_SERIES-*" allows finding of "/precise-updates/" and
    #   "/precise-security/" sections.
    find "$WO_LOC/${MIRROR_BASE}/" \
        -name "pool"  -type d -prune -o \
        -name ".temp" -type d -prune -o \
        -iwholename "$WO_LOC/${MIRROR_BASE}/*/dists/$REPO_SERIES/*/$ARCH_FOLDER/Packages.gz" -execdir bash -c "[ -e Packages ] ||  gzip -${GZIP_OPTION} '{}' " \; -o \
        -iwholename "$WO_LOC/${MIRROR_BASE}/*/dists/$REPO_SERIES-*/$ARCH_FOLDER/Packages.gz" -execdir bash -c "[ -e Packages ] ||  gzip -${GZIP_OPTION} '{}' " \; \
      | tee -a "$LOG"

    echo "$(gettext "#Finding Packages files ...\n\n\n\n\n")"
    find "$WO_LOC/${MIRROR_BASE}/" \
        -name "pool"  -type d -prune -o \
        -name ".temp" -type d -prune -o \
        -iwholename "$WO_LOC/${MIRROR_BASE}/*/dists/$REPO_SERIES/*/$ARCH_FOLDER/Packages" -print -o \
        -iwholename "$WO_LOC/${MIRROR_BASE}/*/dists/$REPO_SERIES-*/$ARCH_FOLDER/Packages" -print > \
        "$TMPDIR/${MIRROR_BASE}.list"

    # load them in sources.list
    while read -r LINE
    do
        echo         | tee -a "$LOG"
        # A space is needed before the following date command to avoid zenity
        #   misinterpreting the output as a percentage of progress and closing early.
        echo " $(date +%T) $(eval_gettext "Processing wasta-offline \${MIRROR_BASE} repository:")" \
                     | tee -a "$LOG"
        echo "$LINE" | tee -a "$LOG"

        # first part of line up to "/dists/" is repository
        BEFORE_DISTS=$(echo $LINE | grep -o ".*dists")
        # trim off "dists"
        REPO=$(echo $BEFORE_DISTS | sed -e 's@dists@@')

        # series and section are in line after "/dists/"
        AFTER_DISTS=$(echo $LINE | grep -o "dists.*")
        # trim off "/dists/" and also anything starting at "/binary/" (unneeded)
        SERIES_SECTION=$(echo $AFTER_DISTS | sed -e 's@dists/@@' | sed -e 's@/binary.*@@' )
        # SERIES is first item
        SERIES=${SERIES_SECTION%%/*}
        # SECTION is last item
        SECTION=$(echo ${SERIES_SECTION##*/} | sed -e "s@${SERIES}@@" )

        # Resulting line for sources.list
        APT_LINE="deb file:\"$REPO\" $SERIES $SECTION"

        echo "$(gettext "Adding following line to sources.list:")"    | tee -a "$LOG"
        echo "$APT_LINE"                                 | tee -a "$LOG"

        echo "$(eval_gettext "#Adding wasta [Offline] \${MIRROR_BASE} repositories...\n\nRepository:  \$REPO\nSeries and Section:  \$SERIES \$SECTION\n\n")"
        #let user see message
        sleep 1
        # Insert at BEGINNING of file
        pkexec wasta-offline-root addOfflineMirror "$WO_LOC" "$LOG_DATE" "$REPO" "$SERIES" "$SECTION"
        PKEXEC_ERR=$?
        if [ $PKEXEC_ERR -gt 0 ]; then
          scriptExit
        fi

    done < "$TMPDIR/${MIRROR_BASE}.list"

    rm -r $TMPDIR
    ) | zenity --progress --title="$(gettext "wasta [Offline]")" \
        --text="$(eval_gettext "Adding wasta [Offline] \${MIRROR_BASE} repositories...\n\n\n\n\n")" \
        --pulsate --auto-close --no-cancel --width=500 --height=200 \
        --window-icon=/usr/share/icons/hicolor/scalable/apps/wasta-offline.svg \
        2>/dev/null

    if [ "$?" -ne 0 ]
    then
        # some error, so will exit
        scriptExit
    fi
else
    echo | tee -a "$LOG"
    echo "No mirror entries to add to sources.list." | tee -a "$LOG"
fi

# perform apt-get update
echo | tee -a "$LOG"
echo "$(date +%T) Performing apt-get update to sync package listings..." | tee -a "$LOG"
echo | tee -a "$LOG"

wait_for_locked_apt
pkexec wasta-offline-root update "$WO_LOC" "$LOG_DATE" &
WATCHED_PID=$!

(
# Loop while still processing
sleep 2
COUNT=2

while [ "$(ps --no-headers -p $WATCHED_PID)" ]
do
    echo "$(eval_gettext "#Updating software lists...\n\nElapsed Time: \$COUNT seconds\n\n\n")"
    sleep 1
    COUNT=$((COUNT+1))
done

echo | tee -a "$LOG"
echo "$(eval_gettext "Info: apt-get update took approximately \$COUNT seconds.")" | tee -a "$LOG"

) | zenity --progress --title="$(gettext "wasta [Offline]: Updating Software Lists")" \
        --text="$(gettext "Updating software lists...\n\n\n\n\n")" \
        --pulsate --auto-close --width=500 --height=200 \
        --window-icon=/usr/share/icons/hicolor/scalable/apps/wasta-offline.svg \
        2>/dev/null

if [ "$?" -ne 0 ]
then
    # Some error or user canceled: exit
    # kill apt-pid if still found
    pkexec wasta-offline-root cancelUpdate "$WO_LOC" "$LOG_DATE"
    PKEXEC_ERR=1
    scriptExit
fi

# ------------------------------------------------------------------------------
# Processing Finished: prompt user to perform updates / installs
# ------------------------------------------------------------------------------

# TODO: shorten window text?
zenity --info --no-wrap --height=200 --width=500 \
    --title="$(gettext "wasta [Offline]: Ready")" --ok-label="$(gettext "Finished")" \
    --window-icon=/usr/share/icons/hicolor/scalable/apps/wasta-offline.svg \
    --text="$(gettext "<big>wasta [Offline] is ready</big>

You may now install or update software using any of the following:
- <i>Update Manager</i>
- <i>Synaptic Package Manager</i>
- terminal commands such as <i>apt</i> and <i>apt-get</i>

<b>******************************************************</b>
<b><i>Please leave this window open</i></b> until all software
updates or installs are complete, then click <b>Finished</b>.
<b>******************************************************</b>

")" 2>/dev/null

# ------------------------------------------------------------------------------
# Finished
# ------------------------------------------------------------------------------
scriptExit
